a `level1` bin

upon running it wait for input from stdin

using gdb to disassemble main

```sh
(gdb) disass main
Dump of assembler code for function main:
   0x08048480 <+0>:     push   %ebp
   0x08048481 <+1>:     mov    %esp,%ebp
   0x08048483 <+3>:     and    $0xfffffff0,%esp
   0x08048486 <+6>:     sub    $0x50,%esp
   0x08048489 <+9>:     lea    0x10(%esp),%eax
   0x0804848d <+13>:    mov    %eax,(%esp)
   0x08048490 <+16>:    call   0x8048340 <gets@plt>
   0x08048495 <+21>:    leave  
   0x08048496 <+22>:    ret    
End of assembler dump.
```

there's really notting .. BUT gets ...

looking at man gets

```sh
NAME
       gets  - get a string from standard input (DEPRE‐
       CATED)

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       [[deprecated]] char *gets(char *s);

DESCRIPTION
       Never use this function.

       gets() reads a line from stdin into  the  buffer
       pointed  to by s until either a terminating new‐
       line or EOF, which it replaces with a null  byte
       ('\0').   No  check  for  buffer overrun is per‐
       formed (see BUGS below).
```

this can be use for buffer overflow attack allowing arbitrary code execution.

but looking at the permission bit

```sh
level1@RainFall:~$ ls -l ./level1 
-rwsr-s---+ 1 level2 users 5138 Mar  6  2016 ./level1 
```

this doesn't look that helpful ...

let's step back and look at bigger picture

```sh
(gdb) info functions
All defined functions:                                    
                                                          
Non-debugging symbols:                                    
0x080482f8  _init                                         
0x08048340  gets                                          
0x08048340  gets@plt                                      
0x08048350  fwrite                                        
0x08048350  fwrite@plt
0x08048360  system
0x08048360  system@plt
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run
0x08048480  main
0x080484a0  __libc_csu_init
0x08048510  __libc_csu_fini
0x08048512  __i686.get_pc_thunk.bx
0x08048520  __do_global_ctors_aux
0x0804854c  _fini
```